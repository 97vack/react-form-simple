{
  "render": {
    "defaultValue": null,
    "name": "render",
    "type": {
      "name": "(bindId: any, config?: ({ rules?: Rules; bindId?: any; onError?: ((msg: string, name?: string | undefined) => void) | undefined; customErrTips?: boolean | undefined; defaultValue?: any; ... 4 more ...; readOnlyText?: ReactNode; } & FormShareProps & { ...; }) | undefined) => (parameter: ReactNode) => ReactNode"
    },
    "tags": {
      "description": "表单项渲染函数，接受两个参数，第一个参数为表单项字段，第二个参数为表单项配置。",
      "link": "具体配置请见<a href=\"/intro/api#formitem\">FormItem</a>",
      "resetType": "(bindId: any, [config]) => (parameter: ReactNode) => ReactNode"
    }
  },
  "useSubscribe": {
    "defaultValue": null,
    "name": "useSubscribe",
    "type": {
      "name": "UseSubscribe<null>"
    },
    "tags": {
      "description": "订阅表单项或者整个表单的hook。接收一个函数，这个函数的返回参数是表单最新的模型数据。返回值则是需要被订阅的数据。",
      "resetType": "useWatch(({ model }) => any)"
    }
  },
  "useWatch": {
    "defaultValue": null,
    "name": "useWatch",
    "type": {
      "name": "UseWatch<null>"
    },
    "tags": {
      "description": "观测表单数据变化的hook。接收两个函数，第一个函数返回需要被观察的模型数据，第二个参数为被观测的模型数据发生改变时执行的回调。观察多个数据的话第一个函数需要返回一个数组。如果只观察一个，允许返回一个字符串。第二个函数会返回两个回调参数，第一个参数为改变后的value，第二个参数为改变前的value，返回的参数类型将会根据第一个函数的返回值类型来，如果第一个函数返回的是字符串的话，那回调参数的类型也将是value，否则就是数组。",
      "resetType": "useWatch(() => string | string[], (value, preValue) => void)"
    }
  },
  "model": {
    "defaultValue": null,
    "name": "model",
    "type": {
      "name": "null"
    },
    "tags": {
      "resetType": "Object",
      "description": "表单模型数据。model的值永远是表单项受控后最新的值。在提交表单数据和在受控表单项内部值的时候，通常会用到model。但是请不要用它来在表单项外部来用它重新渲染视图，它不会重新表单外部的视图渲染。如果需要在外部用最新的值来渲染，请使用useSubscribe来订阅值。"
    }
  },
  "setState": {
    "defaultValue": null,
    "name": "setState",
    "type": {
      "name": "() => Dispatch<unknown>"
    },
    "tags": {
      "description": "手动重新渲染视图。如果在外部需要重新渲染视图，可以调用setState让当前组件树重新渲染。",
      "resetType": "Function"
    }
  },
  "clearValidate": {
    "defaultValue": null,
    "name": "clearValidate",
    "type": {
      "name": "(bindId?: ValidateBindIds) => void"
    },
    "tags": {
      "description": "清除校验信息，只是清除校验时产生的错误，校验器依然存在。接收对应的表单项字段，可以为单个字段，也可以是字段的集合，如果不传bindId，则会清除整个表单的校验信息。",
      "resetType": "(bindId?: string | string[]) => void",
      "param": "bindId The form item to be cleared can be passed or not passed to clear the entire form."
    }
  },
  "removeValidator": {
    "defaultValue": null,
    "name": "removeValidator",
    "type": {
      "name": "(bindId?: ValidateBindIds) => void"
    },
    "tags": {
      "description": "移除校验器。调用此方法后，表单项后续的校验将不会触发。接收对应的表单项字段，可以为单个字段，也可以是字段的集合，如果不传bindId，则会移除整个表单的校验。",
      "resetType": "(bindId?: string | string[]) => void",
      "param": "bindId The form item to be removed can be not passed. If not passed, the entire form will be removed."
    }
  },
  "reapplyValidator": {
    "defaultValue": null,
    "name": "reapplyValidator",
    "type": {
      "name": "(bindId?: ValidateBindIds) => void"
    },
    "tags": {
      "description": "重新添加校验器。当调用removeValidator后，如果需要重新校验，可以调用这个方法。接收对应的表单项字段，可以为单个字段，也可以是字段的集合，如果不传bindId，则会重新申请整个表单的校验。",
      "resetType": "(bindId?: string | string[]) => void",
      "param": "Reapply for form item verification",
      "returns": "bindId Re-apply form items. If not passed, the entire form will be re-applied for verification."
    }
  },
  "setValue": {
    "defaultValue": null,
    "name": "setValue",
    "type": {
      "name": "(bindId: any, value: any) => void"
    },
    "tags": {
      "description": "设置表单项的内部的value，将会将所设置的value传给渲染控件，以达到受控，使用useForm时，这个API通常会用不到。",
      "param": "bindId"
    }
  },
  "setValues": {
    "defaultValue": null,
    "name": "setValues",
    "type": {
      "name": "(values: Record<string, any>) => void"
    },
    "tags": {
      "description": "设置表单项的内部的value，将会将所设置的value传给渲染控件，以达到受控。与setValue不同的是，这个API接收一个对象，这个对象是表单字段与value的集合，比如<strong>setValues</strong>({ field: value })。",
      "param": "bindId"
    }
  },
  "validate": {
    "defaultValue": null,
    "name": "validate",
    "type": {
      "name": "() => Promise<unknown>"
    },
    "tags": {
      "description": "表单校验。返回一个Promise，如果全部校验通过，会执行<strong>.then()</strong>，否则会执行<strong>.catch()</strong>并将错误信息在<strong>.catch</strong>(err => {})里返回出来。"
    }
  },
  "reset": {
    "defaultValue": null,
    "name": "reset",
    "type": {
      "name": "() => void"
    },
    "tags": {
      "description": "重置表单，只有当表单项传入了defaultValue时，该表单项才能被reset。使用useForm时，内部已经默认使用defaultValue。也可以在render函数的参数里传入defaultValue覆盖默认值。使用FormItem的时候需要手动传入。"
    }
  },
  "contextProps": {
    "defaultValue": null,
    "name": "contextProps",
    "type": {
      "name": "ContextProps"
    },
    "tags": {
      "resetType": "Object",
      "infoTitle": "contextProps具体参数",
      "infoPath": "docs_apiDemos_contextProps",
      "description": "表单项选项式生命周期。对整个表单进行依赖收集的地方，可以在这里对表单项做一些更加精确的控制。使用 useForm 时，通常不会需要这个。使用 FormItem 或者 Form 时或者定制化表单时，需要用到这个。当 useForm 与 Form 或者 FormItem 结合使用的时候，需要将 useForm 暴露出的 contextProps 传递给组件来进行依赖收集，也可以在你的代码里做一层代理执行某些逻辑后，在执行 contextProps 里的生命周期达到自定义的控制。"
    }
  }
}